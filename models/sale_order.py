# -*- coding: utf-8 -*-
"""
M√≥dulo: sale_order.py
===================

FUNCIONALIDAD PRINCIPAL:
- Extensi√≥n del modelo sale.order para integrar el sistema de cap√≠tulos t√©cnicos
- Gesti√≥n de presupuestos estructurados con cap√≠tulos y secciones jer√°rquicas
- Widget acorde√≥n para visualizaci√≥n interactiva de la estructura
- Operaciones CRUD para productos dentro de secciones espec√≠ficas
- Sistema de validaciones para mantener la integridad estructural

ARQUITECTURA DE DATOS:
- Hereda de sale.order a√±adiendo campos espec√≠ficos para cap√≠tulos
- Extiende sale.order.line con campos de control estructural
- Integraci√≥n con modelos capitulo.py y capitulo_seccion.py
- Comunicaci√≥n bidireccional con JavaScript mediante controladores

FUNCIONALIDADES CLAVE:
1. Agrupaci√≥n autom√°tica de l√≠neas por cap√≠tulos y secciones
2. Widget acorde√≥n para navegaci√≥n visual de la estructura
3. Inserci√≥n controlada de productos en secciones espec√≠ficas
4. Validaciones de integridad para encabezados estructurales
5. Sistema de logging extensivo para depuraci√≥n
6. Gesti√≥n de condiciones particulares por secci√≥n

COMUNICACI√ìN CON FRONTEND:
- M√©todo add_product_to_section: Endpoint para a√±adir productos v√≠a JavaScript
- Campo capitulos_agrupados: JSON para renderizado del widget acorde√≥n
- M√©todo save_condiciones_particulares: Persistencia de texto libre

REFERENCIAS PRINCIPALES:
- models/capitulo.py: Definici√≥n de cap√≠tulos y plantillas
- models/capitulo_seccion.py: Estructura de secciones y l√≠neas
- controllers/main.py: Endpoints HTTP para comunicaci√≥n
- static/src/js/capitulos_accordion_widget.js: Widget frontend
- wizard/capitulo_wizard.py: Interface de gesti√≥n de cap√≠tulos
- views/sale_order_view.xml: Vistas con widget acorde√≥n integrado

M√âTODOS PRINCIPALES:
- _compute_capitulos_agrupados(): Agrupa l√≠neas en estructura JSON
- _compute_tiene_multiples_capitulos(): Determina visibilidad del acorde√≥n
- add_product_to_section(): Inserta productos en secciones espec√≠ficas
- save_condiciones_particulares(): Guarda texto libre por secci√≥n
- action_open_capitulo_wizard(): Abre wizard de gesti√≥n
- toggle_capitulo_collapsed(): Controla estado de expansi√≥n

VALIDACIONES Y SEGURIDAD:
- Prevenci√≥n de eliminaci√≥n de encabezados estructurales
- Control de modificaci√≥n de campos cr√≠ticos
- Validaci√≥n de permisos en operaciones CRUD
- Logging extensivo para auditor√≠a y depuraci√≥n
"""

from odoo import models, fields, api
from odoo.exceptions import UserError
import json
import logging

_logger = logging.getLogger(__name__)

class SaleOrder(models.Model):
    """
    Extensi√≥n del modelo sale.order para integrar cap√≠tulos t√©cnicos estructurados.
    
    HERENCIA: sale.order
    FUNCIONALIDAD: Gesti√≥n de presupuestos con estructura jer√°rquica de cap√≠tulos y secciones
    
    CAMPOS A√ëADIDOS:
    - capitulo_ids: Relaci√≥n Many2many con cap√≠tulos aplicados al presupuesto
    - capitulos_agrupados: JSON computed con estructura para widget acorde√≥n
    - tiene_multiples_capitulos: Boolean computed para mostrar/ocultar acorde√≥n
    
    M√âTODOS PRINCIPALES:
    - _compute_capitulos_agrupados(): Genera estructura JSON para frontend
    - add_product_to_section(): Inserta productos en secciones espec√≠ficas
    - action_open_capitulo_wizard(): Abre interface de gesti√≥n de cap√≠tulos
    
    INTEGRACI√ìN:
    - Frontend: Widget acorde√≥n JavaScript para navegaci√≥n visual
    - Backend: Controladores HTTP para operaciones CRUD
    - Modelos: Cap√≠tulos, secciones y l√≠neas de producto
    """
    _inherit = 'sale.order'
    
    # Relaci√≥n Many2many con los cap√≠tulos aplicados a este presupuesto
    capitulo_ids = fields.Many2many(
        'capitulo.contrato',
        string='Cap√≠tulos',
        help="Cap√≠tulos t√©cnicos aplicados a este presupuesto"
    )
    
    # Campo computed que contiene la estructura JSON para el widget acorde√≥n
    capitulos_agrupados = fields.Text(
        string='Cap√≠tulos Agrupados',
        compute='_compute_capitulos_agrupados',
        store=False,
        help="Estructura JSON con cap√≠tulos y secciones para el widget acorde√≥n"
    )
    
    # Campo computed que determina si mostrar el widget acorde√≥n
    tiene_multiples_capitulos = fields.Boolean(
        string='Tiene M√∫ltiples Cap√≠tulos',
        compute='_compute_tiene_multiples_capitulos',
        store=False,
        help="Indica si el presupuesto tiene estructura de cap√≠tulos para mostrar el acorde√≥n"
    )

    def _get_base_name(self, decorated_name):
        """Extrae el nombre base de un cap√≠tulo o secci√≥n decorado."""
        import re
        name = str(decorated_name)
        # 1. Eliminar sufijos como (SECCI√ìN FIJA) o contadores
        name = re.sub(r'\s*\((SECCI√ìN FIJA|\d+)\)$', '', name).strip()
        # 2. Eliminar caracteres decorativos de los extremos
        decorative_chars = ' \t\n\r=‚ïêüîíüìã'
        name = name.strip(decorative_chars)
        return name
    
    @api.depends('order_line', 'order_line.es_encabezado_capitulo', 'order_line.es_encabezado_seccion', 'order_line.sequence')
    def _compute_capitulos_agrupados(self):
        """
        Calcula la estructura JSON de cap√≠tulos y secciones para el widget acorde√≥n.
        
        PROP√ìSITO:
        - Agrupa las l√≠neas del pedido en una estructura jer√°rquica
        - Genera JSON compatible con el widget acorde√≥n JavaScript
        - Mantiene el orden secuencial de cap√≠tulos, secciones y productos
        
        L√ìGICA DE AGRUPACI√ìN:
        1. Recorre todas las l√≠neas ordenadas por secuencia
        2. Identifica encabezados de cap√≠tulos y secciones
        3. Agrupa productos bajo su secci√≥n correspondiente
        4. Calcula subtotales por secci√≥n y cap√≠tulo
        
        ESTRUCTURA JSON GENERADA:
        {
            "capitulos": [
                {
                    "nombre": "Cap√≠tulo 1",
                    "collapsed": false,
                    "subtotal": 1500.00,
                    "secciones": [
                        {
                            "nombre": "Secci√≥n A",
                            "productos": [
                                {
                                    "id": 123,
                                    "nombre": "Producto X",
                                    "cantidad": 2,
                                    "precio": 100.00,
                                    "subtotal": 200.00
                                }
                            ],
                            "subtotal": 200.00,
                            "condiciones_particulares": "Texto libre..."
                        }
                    ]
                }
            ]
        }
        
        DEPENDENCIAS:
        - order_line: L√≠neas del pedido
        - es_encabezado_capitulo: Flag de encabezado de cap√≠tulo
        - es_encabezado_seccion: Flag de encabezado de secci√≥n
        - sequence: Orden secuencial de las l√≠neas
        
        REFERENCIAS:
        - static/src/js/capitulos_accordion_widget.js: Consume este JSON
        - views/sale_order_view.xml: Widget que renderiza la estructura
        """
        for order in self:
            # Inicializar estructura de datos
            capitulos_data = {
                'capitulos': []
            }
            
            # Variables de control para el procesamiento secuencial
            capitulo_actual = None
            seccion_actual = None
            
            # Procesar todas las l√≠neas ordenadas por secuencia
            for line in order.order_line.sorted('sequence'):
                if line.es_encabezado_capitulo:
                    # Nuevo cap√≠tulo encontrado
                    capitulo_actual = {
                        'nombre': line.name,
                        'collapsed': getattr(line, 'collapsed', False),  # Estado de expansi√≥n
                        'subtotal': 0.0,
                        'secciones': []
                    }
                    capitulos_data['capitulos'].append(capitulo_actual)
                    seccion_actual = None  # Reset secci√≥n al cambiar de cap√≠tulo
                    
                elif line.es_encabezado_seccion and capitulo_actual:
                    # Nueva secci√≥n encontrada dentro del cap√≠tulo actual
                    seccion_actual = {
                        'nombre': line.name,
                        'productos': [],
                        'subtotal': 0.0,
                        'condiciones_particulares': getattr(line, 'condiciones_particulares', '') or ''
                    }
                    capitulo_actual['secciones'].append(seccion_actual)
                    
                elif seccion_actual and not line.es_encabezado_capitulo and not line.es_encabezado_seccion:
                    # Producto normal dentro de una secci√≥n
                    producto_data = {
                        'id': line.id,
                        'nombre': line.name,
                        'cantidad': line.product_uom_qty,
                        'precio': line.price_unit,
                        'subtotal': line.price_subtotal
                    }
                    seccion_actual['productos'].append(producto_data)
                    
                    # Acumular subtotales
                    seccion_actual['subtotal'] += line.price_subtotal
                    capitulo_actual['subtotal'] += line.price_subtotal
            
            # Convertir a JSON para el frontend
            order.capitulos_agrupados = json.dumps(capitulos_data, ensure_ascii=False)
    
    @api.depends('order_line', 'order_line.es_encabezado_capitulo')
    def _compute_tiene_multiples_capitulos(self):
        """
        Determina si el presupuesto tiene estructura de cap√≠tulos para mostrar el widget acorde√≥n.
        
        PROP√ìSITO:
        - Controla la visibilidad del widget acorde√≥n en la vista
        - Optimiza el renderizado mostrando el acorde√≥n solo cuando es necesario
        - Evita mostrar el widget en presupuestos sin estructura de cap√≠tulos
        
        L√ìGICA:
        - Cuenta las l√≠neas marcadas como encabezados de cap√≠tulo
        - Si hay al menos un encabezado de cap√≠tulo, activa el acorde√≥n
        - El acorde√≥n se muestra incluso con un solo cap√≠tulo para consistencia
        
        DEPENDENCIAS:
        - order_line: L√≠neas del pedido
        - es_encabezado_capitulo: Flag que identifica encabezados de cap√≠tulo
        
        REFERENCIAS:
        - views/sale_order_view.xml: Usa este campo para mostrar/ocultar el widget
        - static/src/js/capitulos_accordion_widget.js: Widget que se controla
        """
        for order in self:
            # Contar encabezados de cap√≠tulo en las l√≠neas del pedido
            capitulos_count = len(order.order_line.filtered('es_encabezado_capitulo'))
            # Activar acorde√≥n si hay al menos un cap√≠tulo estructurado
            order.tiene_multiples_capitulos = capitulos_count >= 1
    
    def action_add_capitulo(self):
        """
        Abre el wizard de gesti√≥n de cap√≠tulos para este presupuesto.
        
        PROP√ìSITO:
        - Proporciona interface gr√°fica para gestionar cap√≠tulos y secciones
        - Permite a√±adir, modificar y eliminar estructura de cap√≠tulos
        - Facilita la aplicaci√≥n de plantillas predefinidas
        
        FUNCIONALIDAD:
        - Crea una acci√≥n de ventana para abrir el wizard
        - Pasa el ID del presupuesto actual como contexto
        - Configura la vista como modal para mejor UX
        
        RETORNO:
        - Dict con configuraci√≥n de acci√≥n de ventana de Odoo
        - Incluye vista, modelo objetivo, contexto y configuraci√≥n modal
        
        REFERENCIAS:
        - wizard/capitulo_wizard.py: Wizard que se abre
        - views/capitulo_wizard_view.xml: Vista del wizard
        - views/sale_order_view.xml: Bot√≥n que llama a este m√©todo
        """
        self.ensure_one()
        
        return {
            'type': 'ir.actions.act_window',
            'name': 'Gestionar Cap√≠tulos del Presupuesto',
            'res_model': 'capitulo.wizard',
            'view_mode': 'form',
            'target': 'new',
            'context': {
                'default_order_id': self.id,
                'active_id': self.id,
                'active_model': 'sale.order'
            }
        }
    
    def toggle_capitulo_collapse(self, capitulo_index):
        """
        Alterna el estado de expansi√≥n/colapso de un cap√≠tulo en el acorde√≥n.
        
        PROP√ìSITO:
        - Controla la visibilidad de secciones dentro de cada cap√≠tulo
        - Mejora la experiencia de usuario permitiendo navegaci√≥n selectiva
        - Mantiene el estado de expansi√≥n para cada cap√≠tulo individualmente
        
        PAR√ÅMETROS:
        - capitulo_index (int): √çndice del cap√≠tulo en la estructura JSON
        
        L√ìGICA:
        1. Parsea la estructura JSON de cap√≠tulos agrupados
        2. Alterna el campo 'collapsed' del cap√≠tulo especificado
        3. Actualiza la estructura JSON con el nuevo estado
        4. Retorna acci√≥n de recarga para actualizar la vista
        
        RETORNO:
        - Dict con acci√≥n de cliente para recargar la vista
        
        REFERENCIAS:
        - static/src/js/capitulos_accordion_widget.js: Llama a este m√©todo
        - controllers/main.py: Podr√≠a exponer este m√©todo v√≠a HTTP
        """
        import json
        
        self.ensure_one()
        capitulos = json.loads(self.capitulos_agrupados or '[]')
        
        if 0 <= capitulo_index < len(capitulos):
            capitulos[capitulo_index]['collapsed'] = not capitulos[capitulo_index].get('collapsed', True)
            self.capitulos_agrupados = json.dumps(capitulos)
        
        return {'type': 'ir.actions.client', 'tag': 'reload'}
    
    @api.model
    def add_product_to_section(self, order_id, capitulo_name, seccion_name, product_id, quantity=1.0):
        """
        A√±ade un producto a una secci√≥n espec√≠fica de un cap√≠tulo en el presupuesto.
        
        PROP√ìSITO:
        - Insertar productos en secciones espec√≠ficas manteniendo la estructura jer√°rquica
        - Validar la integridad de la estructura de cap√≠tulos y secciones
        - Controlar el orden secuencial de las l√≠neas del presupuesto
        - Proporcionar logging extensivo para depuraci√≥n y auditor√≠a
        
        PAR√ÅMETROS:
        - order_id (int): ID del presupuesto donde insertar el producto
        - capitulo_name (str): Nombre del cap√≠tulo objetivo
        - seccion_name (str): Nombre de la secci√≥n objetivo
        - product_id (int): ID del producto a insertar
        - quantity (float): Cantidad del producto (default: 1.0)
        
        L√ìGICA DE INSERCI√ìN:
        1. Validaci√≥n de par√°metros de entrada
        2. B√∫squeda y validaci√≥n del presupuesto
        3. Localizaci√≥n del cap√≠tulo en la estructura
        4. Localizaci√≥n de la secci√≥n dentro del cap√≠tulo
        5. Validaci√≥n de tipo de secci√≥n (no permitir en secciones de solo texto)
        6. C√°lculo de posici√≥n de inserci√≥n (inmediatamente despu√©s del encabezado)
        7. Desplazamiento de l√≠neas existentes para hacer espacio
        8. Creaci√≥n de la nueva l√≠nea de producto
        9. Rec√°lculo de estructura JSON para el frontend
        
        VALIDACIONES:
        - Existencia del presupuesto y permisos de acceso
        - Existencia del producto en el cat√°logo
        - Existencia del cap√≠tulo en el presupuesto
        - Existencia de la secci√≥n en el cap√≠tulo
        - Tipo de secci√≥n (no permitir productos en "condiciones particulares")
        
        MANEJO DE SECUENCIAS:
        - Inserta inmediatamente despu√©s del encabezado de secci√≥n
        - Desplaza todas las l√≠neas posteriores +1 en secuencia
        - Mantiene el orden jer√°rquico: cap√≠tulo ‚Üí secci√≥n ‚Üí productos
        
        LOGGING Y DEPURACI√ìN:
        - Log detallado de cada paso del proceso
        - Informaci√≥n de validaciones y errores
        - Estado de secuencias antes y despu√©s de la inserci√≥n
        - Confirmaci√≥n de creaci√≥n exitosa
        
        RETORNO:
        - Dict con resultado de la operaci√≥n:
          {
              'success': True/False,
              'message': 'Descripci√≥n del resultado',
              'line_id': ID de la l√≠nea creada (si exitoso)
          }
        
        EXCEPCIONES:
        - UserError: Para errores de validaci√≥n y l√≥gica de negocio
        - Exception: Para errores t√©cnicos durante la creaci√≥n
        
        REFERENCIAS:
        - controllers/main.py: Expone este m√©todo v√≠a HTTP/JSON
        - static/src/js/capitulos_accordion_widget.js: Llama a este m√©todo
        - models/sale_order.py (SaleOrderLine): Modelo de l√≠neas modificado
        - wizard/capitulo_wizard.py: Usa funcionalidad similar
        """
        import logging
        _logger = logging.getLogger(__name__)
        
        # === VALIDACI√ìN DE PAR√ÅMETROS ===
        _logger.info(f"DEBUG ADD_PRODUCT: Iniciando inserci√≥n de producto")
        _logger.info(f"DEBUG ADD_PRODUCT: - Order ID: {order_id}")
        _logger.info(f"DEBUG ADD_PRODUCT: - Cap√≠tulo: '{capitulo_name}'")
        _logger.info(f"DEBUG ADD_PRODUCT: - Secci√≥n: '{seccion_name}'")
        _logger.info(f"DEBUG ADD_PRODUCT: - Product ID: {product_id}")
        _logger.info(f"DEBUG ADD_PRODUCT: - Cantidad: {quantity}")
        
        if not all([order_id, capitulo_name, seccion_name, product_id]):
            _logger.error(f"DEBUG ADD_PRODUCT: ‚ùå Par√°metros faltantes")
            raise UserError("Faltan par√°metros requeridos para a√±adir el producto")
        
        # === VALIDACI√ìN DEL PRESUPUESTO ===
        try:
            order = self.browse(order_id)
            order.ensure_one()
            _logger.info(f"DEBUG ADD_PRODUCT: ‚úÖ Presupuesto encontrado: {order.name}")
        except Exception as e:
            _logger.error(f"DEBUG ADD_PRODUCT: ‚ùå Error al acceder al presupuesto: {str(e)}")
            raise UserError(f"No se pudo acceder al presupuesto: {str(e)}")
        
        # === VALIDACI√ìN DEL PRODUCTO ===
        try:
            product = self.env['product.product'].browse(product_id)
            if not product.exists():
                _logger.error(f"DEBUG ADD_PRODUCT: ‚ùå Producto {product_id} no existe")
                raise UserError("El producto seleccionado no existe")
                
            _logger.info(f"DEBUG ADD_PRODUCT: ‚úÖ Producto encontrado: {product.name} (ID: {product.id})")
        except Exception as e:
            _logger.error(f"DEBUG ADD_PRODUCT: ‚ùå Error al validar producto: {str(e)}")
            raise e
        
        _logger.info(f"DEBUG ADD_PRODUCT: Producto encontrado: {product.name}")
        
        # === B√öSQUEDA DEL CAP√çTULO ===
        capitulo_line = None
        seccion_line = None
        
        _logger.info(f"DEBUG ADD_PRODUCT: Buscando cap√≠tulo '{capitulo_name}' y secci√≥n '{seccion_name}'")
        _logger.info(f"DEBUG ADD_PRODUCT: L√≠neas en el pedido:")
        for line in order.order_line.sorted('sequence'):
            _logger.info(f"DEBUG ADD_PRODUCT: - L√≠nea {line.sequence}: '{line.name}' (Cap√≠tulo: {line.es_encabezado_capitulo}, Secci√≥n: {line.es_encabezado_seccion})")
        
        # Buscar el encabezado del cap√≠tulo
        for line in order.order_line.sorted('sequence'):
            if line.es_encabezado_capitulo:
                line_base_name = self._get_base_name(line.name)
                capitulo_base_name = self._get_base_name(capitulo_name)
                
                _logger.info(f"DEBUG ADD_PRODUCT: Comparando cap√≠tulo base '{line_base_name}' con '{capitulo_base_name}'")
                
                if line_base_name.upper() == capitulo_base_name.upper():
                    capitulo_line = line
                    _logger.info(f"DEBUG ADD_PRODUCT: ‚úÖ Cap√≠tulo encontrado: {line.name}")
                    break
        
        if not capitulo_line:
            _logger.error(f"DEBUG ADD_PRODUCT: ‚ùå No se encontr√≥ el cap√≠tulo '{capitulo_name}'")
            raise UserError(f"No se encontr√≥ el cap√≠tulo: {capitulo_name}")
        
        # === B√öSQUEDA DE LA SECCI√ìN ===
        _logger.info(f"DEBUG ADD_PRODUCT: Buscando secci√≥n '{seccion_name}' despu√©s del cap√≠tulo '{capitulo_line.name}'")
        _logger.info(f"DEBUG ADD_PRODUCT: Cap√≠tulo encontrado en secuencia: {capitulo_line.sequence}")
        
        # Obtener todas las l√≠neas despu√©s del cap√≠tulo
        # Si todas las l√≠neas tienen la misma secuencia, usar el ID para ordenar
        all_lines = order.order_line.sorted(lambda l: (l.sequence, l.id))
        capitulo_index = None
        for i, line in enumerate(all_lines):
            if line.id == capitulo_line.id:
                capitulo_index = i
                break
        
        if capitulo_index is not None:
            lines_after_chapter = all_lines[capitulo_index + 1:]
        else:
            lines_after_chapter = order.order_line.filtered(lambda l: l.sequence > capitulo_line.sequence).sorted('sequence')
        
        _logger.info(f"DEBUG ADD_PRODUCT: L√≠neas despu√©s del cap√≠tulo: {len(lines_after_chapter)}")
        
        # Buscar la secci√≥n espec√≠fica dentro del cap√≠tulo
        for line in lines_after_chapter:
            _logger.info(f"DEBUG ADD_PRODUCT: Revisando l√≠nea {line.sequence}: '{line.name}' (Cap√≠tulo: {line.es_encabezado_capitulo}, Secci√≥n: {line.es_encabezado_seccion})")
            
            if line.es_encabezado_capitulo:
                # Si encontramos otro cap√≠tulo, paramos la b√∫squeda
                _logger.info(f"DEBUG ADD_PRODUCT: Encontrado otro cap√≠tulo, parando b√∫squeda")
                break
            elif line.es_encabezado_seccion:
                line_base_name = self._get_base_name(line.name)
                seccion_base_name = self._get_base_name(seccion_name)
                
                _logger.info(f"DEBUG ADD_PRODUCT: Comparando secci√≥n base '{line_base_name}' con '{seccion_base_name}'")
                
                if line_base_name.upper() == seccion_base_name.upper():
                    seccion_line = line
                    _logger.info(f"DEBUG ADD_PRODUCT: ‚úÖ Secci√≥n encontrada: {line.name}")
                    break
            else:
                _logger.info(f"DEBUG ADD_PRODUCT: L√≠nea de producto: '{line.name}' (secuencia: {line.sequence})")
        
        if not seccion_line:
            raise UserError(f"No se encontr√≥ la secci√≥n: {seccion_name} en el cap√≠tulo: {capitulo_name}")
        
        # === VALIDACI√ìN DE TIPO DE SECCI√ìN ===
        seccion_name_lower = seccion_name.lower().strip()
        if 'condiciones particulares' in seccion_name_lower:
            _logger.warning(f"DEBUG ADD_PRODUCT: ‚ùå Intento de a√±adir producto a secci√≥n de solo texto: '{seccion_name}'")
            raise UserError(f"No se pueden a√±adir productos a la secci√≥n '{seccion_name}'. Esta secci√≥n es solo para texto editable.")
        
        # === C√ÅLCULO DE POSICI√ìN DE INSERCI√ìN ===
        # Estrategia: insertar inmediatamente despu√©s del encabezado de secci√≥n
        insert_sequence = seccion_line.sequence + 1
        _logger.info(f"DEBUG: Insertando producto inmediatamente despu√©s de la secci√≥n '{seccion_line.name}' (seq: {seccion_line.sequence})")
        _logger.info(f"DEBUG: Secuencia de inserci√≥n: {insert_sequence}")

        # === DESPLAZAMIENTO DE L√çNEAS EXISTENTES ===
        # Desplazar todas las l√≠neas que tengan secuencia >= insert_sequence
        lines_to_shift = order.order_line.filtered(lambda l: l.sequence >= insert_sequence)
        _logger.info(f"DEBUG: {len(lines_to_shift)} l√≠neas para desplazar.")

        # Ordenamos de forma descendente para evitar conflictos de clave √∫nica al actualizar
        for line_to_shift in lines_to_shift.sorted(key=lambda r: r.sequence, reverse=True):
            new_seq = line_to_shift.sequence + 1
            _logger.info(f"DEBUG: Desplazando l√≠nea '{line_to_shift.name}' de {line_to_shift.sequence} a {new_seq}.")
            # Usamos el contexto para saltar la validaci√≥n de escritura en encabezados
            line_to_shift.with_context(from_capitulo_wizard=True).sequence = new_seq
        
        _logger.info(f"DEBUG: Secuencia de inserci√≥n final: {insert_sequence}")
        
        # === CREACI√ìN DE LA NUEVA L√çNEA ===
        try:
            new_line_vals = {
                'order_id': order.id,
                'product_id': product.id,
                'name': product.name,
                'product_uom_qty': quantity,
                'product_uom': product.uom_id.id,
                'price_unit': product.list_price,
                'sequence': insert_sequence,
                'es_encabezado_capitulo': False,
                'es_encabezado_seccion': False,
            }
            
            _logger.info(f"DEBUG ADD_PRODUCT: Valores para nueva l√≠nea: {new_line_vals}")
            
            # Crear la l√≠nea con contexto especial para evitar restricciones
            _logger.info(f"DEBUG ADD_PRODUCT: Creando l√≠nea con contexto from_capitulo_wizard=True")
            new_line = self.env['sale.order.line'].with_context(
                from_capitulo_wizard=True
            ).create(new_line_vals)
            
            _logger.info(f"DEBUG ADD_PRODUCT: ‚úÖ L√≠nea creada exitosamente con ID: {new_line.id}")
            
        except Exception as e:
            _logger.error(f"DEBUG ADD_PRODUCT: ‚ùå Error al crear l√≠nea: {str(e)}")
            import traceback
            _logger.error(f"DEBUG ADD_PRODUCT: Traceback completo: {traceback.format_exc()}")
            raise UserError(f"Error al crear la l√≠nea de producto: {str(e)}")
        
        # === FINALIZACI√ìN Y REC√ÅLCULO ===
        # Forzar la escritura de los datos pendientes sin commit
        self.env.cr.flush()
        
        # Refrescar el record completo desde la base de datos
        order.invalidate_recordset()
        # Forzar el rec√°lculo del campo computed
        order._compute_capitulos_agrupados()
        
        # === LOGGING DE CONFIRMACI√ìN ===
        _logger.info(f"DEBUG: Producto a√±adido exitosamente. ID de nueva l√≠nea: {new_line.id}")
        _logger.info(f"DEBUG: Secuencia de nueva l√≠nea: {new_line.sequence}")
        _logger.info(f"DEBUG: Total de l√≠neas en el pedido: {len(order.order_line)}")
        _logger.info(f"DEBUG: Campo capitulos_agrupados recalculado: {len(order.capitulos_agrupados)} caracteres")
        
        # Verificar que la nueva l√≠nea est√° en order_line
        if new_line.id in order.order_line.ids:
            _logger.info(f"DEBUG: ‚úì Nueva l√≠nea confirmada en order_line")
        else:
            _logger.error(f"DEBUG: ‚úó Nueva l√≠nea NO encontrada en order_line")
        
        return {
            'success': True,
            'message': f'Producto {product.name} a√±adido a {seccion_name}',
            'line_id': new_line.id
        }
    
    @api.model
    def save_condiciones_particulares(self, order_id, capitulo_name, seccion_name, condiciones_text):
        """
        Guarda las condiciones particulares de una secci√≥n espec√≠fica.
        
        PROP√ìSITO:
        - Permitir la edici√≥n de texto libre en secciones de "condiciones particulares"
        - Persistir informaci√≥n textual espec√≠fica por secci√≥n
        - Proporcionar flexibilidad para contenido no estructurado
        
        PAR√ÅMETROS:
        - order_id (int): ID del presupuesto
        - capitulo_name (str): Nombre del cap√≠tulo contenedor
        - seccion_name (str): Nombre de la secci√≥n objetivo
        - condiciones_text (str): Texto libre a guardar
        
        L√ìGICA:
        1. Validaci√≥n del presupuesto
        2. B√∫squeda de la secci√≥n espec√≠fica
        3. Actualizaci√≥n del campo condiciones_particulares
        4. Logging de la operaci√≥n
        
        VALIDACIONES:
        - Existencia del presupuesto
        - Existencia de la secci√≥n en el cap√≠tulo
        
        RETORNO:
        - Dict con resultado de la operaci√≥n
        
        REFERENCIAS:
        - static/src/js/capitulos_accordion_widget.js: Llama a este m√©todo
        - controllers/main.py: Expone este m√©todo v√≠a HTTP
        """
        import logging
        _logger = logging.getLogger(__name__)
        
        _logger.info(f"DEBUG SAVE_CONDICIONES: Guardando condiciones para cap√≠tulo '{capitulo_name}', secci√≥n '{seccion_name}'")
        _logger.info(f"DEBUG SAVE_CONDICIONES: Texto: {condiciones_text[:100]}...")
        
        order = self.browse(order_id)
        order.ensure_one()
        
        # Buscar la l√≠nea de la secci√≥n espec√≠fica
        seccion_line = None
        for line in order.order_line.sorted('sequence'):
            if line.es_encabezado_seccion:
                line_base_name = self._get_base_name(line.name)
                seccion_base_name = self._get_base_name(seccion_name)
                
                if line_base_name.upper() == seccion_base_name.upper():
                    seccion_line = line
                    break
        
        if not seccion_line:
            _logger.error(f"DEBUG SAVE_CONDICIONES: ‚ùå No se encontr√≥ la secci√≥n '{seccion_name}'")
            raise UserError(f"No se encontr√≥ la secci√≥n: {seccion_name}")
        
        try:
            # Guardar las condiciones particulares en la l√≠nea de secci√≥n
            seccion_line.with_context(from_capitulo_wizard=True).condiciones_particulares = condiciones_text
            _logger.info(f"DEBUG SAVE_CONDICIONES: ‚úÖ Condiciones guardadas en l√≠nea {seccion_line.id}")
            
            return {
                'success': True,
                'message': f'Condiciones particulares guardadas para {seccion_name}'
            }
            
        except Exception as e:
            _logger.error(f"DEBUG SAVE_CONDICIONES: ‚ùå Error al guardar: {str(e)}")
            raise UserError(f"Error al guardar las condiciones particulares: {str(e)}")


class SaleOrderLine(models.Model):
    """
    Extensi√≥n del modelo sale.order.line para soportar estructura de cap√≠tulos.
    
    HERENCIA: sale.order.line
    FUNCIONALIDAD: Control de integridad estructural y campos espec√≠ficos de cap√≠tulos
    
    CAMPOS A√ëADIDOS:
    - es_encabezado_capitulo: Flag para identificar encabezados de cap√≠tulo
    - es_encabezado_seccion: Flag para identificar encabezados de secci√≥n
    - condiciones_particulares: Campo de texto libre para secciones espec√≠ficas
    
    VALIDACIONES IMPLEMENTADAS:
    - Prevenci√≥n de eliminaci√≥n de encabezados estructurales
    - Control de modificaci√≥n de campos cr√≠ticos en encabezados
    - Restricciones de creaci√≥n manual de encabezados
    - Validaci√≥n de contexto para operaciones del wizard
    
    M√âTODOS SOBRESCRITOS:
    - unlink(): Previene eliminaci√≥n de encabezados
    - write(): Controla modificaci√≥n de campos protegidos
    - create(): Valida creaci√≥n de nuevas l√≠neas
    
    CONTEXTOS ESPECIALES:
    - from_capitulo_wizard: Permite operaciones desde el wizard de cap√≠tulos
    - Bypass de validaciones para operaciones controladas
    
    REFERENCIAS:
    - wizard/capitulo_wizard.py: Usa contexto especial para operaciones
    - controllers/main.py: Operaciones CRUD controladas
    - models/sale_order.py: M√©todos que manipulan l√≠neas
    """
    _inherit = 'sale.order.line'
    
    # Flag para identificar l√≠neas que son encabezados de cap√≠tulo
    es_encabezado_capitulo = fields.Boolean(
        string='Es Encabezado de Cap√≠tulo',
        default=False,
        help="Indica si esta l√≠nea es un encabezado de cap√≠tulo (no modificable)"
    )
    
    # Flag para identificar l√≠neas que son encabezados de secci√≥n
    es_encabezado_seccion = fields.Boolean(
        string='Es Encabezado de Secci√≥n',
        default=False,
        help="Indica si esta l√≠nea es un encabezado de secci√≥n (no modificable)"
    )
    
    # Campo de texto libre para condiciones particulares de secciones
    condiciones_particulares = fields.Text(
        string='Condiciones Particulares',
        help="Texto libre para condiciones particulares de esta secci√≥n"
    )
    
    def unlink(self):
        """Previene la eliminaci√≥n de encabezados de cap√≠tulos y secciones"""
        import logging
        _logger = logging.getLogger(__name__)
        
        _logger.info(f"DEBUG UNLINK: Intentando eliminar {len(self)} l√≠neas")
        _logger.info(f"DEBUG UNLINK: Contexto completo: {dict(self.env.context)}")
        _logger.info(f"DEBUG UNLINK: from_capitulo_widget: {self.env.context.get('from_capitulo_widget')}")
        
        for line in self:
            _logger.info(f"DEBUG UNLINK: L√≠nea {line.id} - '{line.name}' - Cap√≠tulo: {line.es_encabezado_capitulo}, Secci√≥n: {line.es_encabezado_seccion}")
        
        # Verificar si alguna l√≠nea es un encabezado
        headers_to_delete = self.filtered(lambda l: l.es_encabezado_capitulo or l.es_encabezado_seccion)
        
        if headers_to_delete:
            header_names = ', '.join(headers_to_delete.mapped('name'))
            _logger.error(f"DEBUG UNLINK: Intentando eliminar encabezados: {header_names}")
            raise UserError(
                f"No se pueden eliminar los siguientes encabezados: {header_names}\n"
                "Los encabezados de cap√≠tulos y secciones son elementos estructurales del presupuesto."
            )
        
        # Si llegamos aqu√≠, todas las l√≠neas son productos normales
        _logger.info("DEBUG UNLINK: Todas las l√≠neas son productos normales, procediendo con eliminaci√≥n")
        
        try:
            result = super().unlink()
            _logger.info("DEBUG UNLINK: Eliminaci√≥n exitosa")
            return result
        except Exception as e:
            _logger.error(f"DEBUG UNLINK: Error durante eliminaci√≥n: {str(e)}")
            raise e
    
    def write(self, vals):
        """Previene la modificaci√≥n de campos cr√≠ticos en encabezados"""
        # Si se est√° modificando desde el wizard de cap√≠tulos, permitir la modificaci√≥n
        if self.env.context.get('from_capitulo_wizard'):
            return super().write(vals)
            
        protected_fields = ['name', 'product_id', 'product_uom_qty', 'price_unit', 'sequence', 'display_type']
        
        for line in self:
            if (line.es_encabezado_capitulo or line.es_encabezado_seccion):
                # Verificar si se est√° intentando modificar campos protegidos
                for field in protected_fields:
                    if field in vals:
                        tipo = "cap√≠tulo" if line.es_encabezado_capitulo else "secci√≥n"
                        raise UserError(
                            f"No se puede modificar el encabezado de {tipo}: {line.name}\n"
                            f"Los encabezados son elementos estructurales del presupuesto y no se pueden editar."
                        )
        
        return super().write(vals)
    
    @api.model
    def create(self, vals):
        """Controla la creaci√≥n de nuevas l√≠neas cuando hay cap√≠tulos estructurados"""
        import logging
        _logger = logging.getLogger(__name__)
        
        _logger.info(f"DEBUG CREATE: Creando l√≠nea con valores: {vals}")
        _logger.info(f"DEBUG CREATE: Contexto: {dict(self.env.context)}")
        _logger.info(f"DEBUG CREATE: from_capitulo_wizard: {self.env.context.get('from_capitulo_wizard')}")
        
        # Si se est√° creando desde el wizard de cap√≠tulos, permitir la creaci√≥n
        if self.env.context.get('from_capitulo_wizard'):
            _logger.info(f"DEBUG CREATE: ‚úÖ Creaci√≥n permitida por contexto from_capitulo_wizard")
            try:
                result = super().create(vals)
                _logger.info(f"DEBUG CREATE: ‚úÖ L√≠nea creada exitosamente con ID: {result.id}")
                return result
            except Exception as e:
                _logger.error(f"DEBUG CREATE: ‚ùå Error en super().create(): {str(e)}")
                import traceback
                _logger.error(f"DEBUG CREATE: Traceback: {traceback.format_exc()}")
                raise e
        
        # Bloquear la creaci√≥n manual de encabezados de cap√≠tulos y secciones
        if vals.get('es_encabezado_capitulo') or vals.get('es_encabezado_seccion'):
            _logger.error(f"DEBUG CREATE: ‚ùå Intento de crear encabezado manualmente")
            raise UserError(
                "No se pueden crear encabezados de cap√≠tulos o secciones manualmente.\n"
                "Use el bot√≥n 'Gestionar Cap√≠tulos' para a√±adir cap√≠tulos estructurados."
            )
        
        # Bloquear la creaci√≥n de l√≠neas de tipo 'line_section' que no sean productos normales
        if vals.get('display_type') in ['line_section', 'line_note'] and not vals.get('product_id'):
            order_id = vals.get('order_id')
            if order_id:
                order = self.env['sale.order'].browse(order_id)
                existing_headers = order.order_line.filtered(
                    lambda l: l.es_encabezado_capitulo or l.es_encabezado_seccion
                )
                if existing_headers:
                    _logger.error(f"DEBUG CREATE: ‚ùå Intento de crear secci√≥n/nota con cap√≠tulos estructurados")
                    raise UserError(
                        "No se pueden a√±adir secciones o notas manualmente cuando el presupuesto tiene cap√≠tulos estructurados.\n"
                        "Use el bot√≥n 'Gestionar Cap√≠tulos' para gestionar la estructura."
                    )
        
        _logger.info(f"DEBUG CREATE: ‚úÖ Validaciones pasadas, creando l√≠nea normal")
        try:
            result = super().create(vals)
            _logger.info(f"DEBUG CREATE: ‚úÖ L√≠nea normal creada exitosamente con ID: {result.id}")
            return result
        except Exception as e:
            _logger.error(f"DEBUG CREATE: ‚ùå Error en super().create() para l√≠nea normal: {str(e)}")
            import traceback
            _logger.error(f"DEBUG CREATE: Traceback: {traceback.format_exc()}")
            raise e