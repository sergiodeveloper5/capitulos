# -*- coding: utf-8 -*-
"""
Extensi√≥n del Modelo Sale Order para Cap√≠tulos T√©cnicos
=======================================================

Este m√≥dulo extiende el modelo sale.order de Odoo para integrar la funcionalidad
de cap√≠tulos t√©cnicos. Permite aplicar cap√≠tulos estructurados a pedidos de venta,
organizando los productos en una jerarqu√≠a de cap√≠tulos y secciones.

Funcionalidades principales:
- Aplicaci√≥n de cap√≠tulos t√©cnicos a pedidos de venta
- Agrupaci√≥n autom√°tica de l√≠neas por cap√≠tulos y secciones
- Widget acorde√≥n para navegaci√≥n visual en la interfaz
- Gesti√≥n de productos por categor√≠as dentro de secciones
- C√°lculo autom√°tico de totales por cap√≠tulo

Autor: Sergio
Fecha: 2024
Versi√≥n: 1.0
"""

from odoo import models, fields, api
from odoo.exceptions import UserError


class SaleOrder(models.Model):
    """
    Extensi√≥n del modelo sale.order para integrar cap√≠tulos t√©cnicos.
    
    Esta extensi√≥n a√±ade la capacidad de aplicar cap√≠tulos estructurados a los pedidos
    de venta, organizando los productos en una jerarqu√≠a clara y proporcionando
    herramientas de navegaci√≥n visual para mejorar la experiencia del usuario.
    
    Caracter√≠sticas a√±adidas:
    - Relaci√≥n Many2many con cap√≠tulos t√©cnicos
    - Campo computado para agrupaci√≥n de l√≠neas en formato JSON
    - M√©todos para gesti√≥n de cap√≠tulos y secciones
    - Integraci√≥n con widget acorde√≥n para la interfaz
    - Soporte para categor√≠as de productos por secci√≥n
    """
    _inherit = 'sale.order'

    # ========================================
    # CAMPOS DE RELACI√ìN CON CAP√çTULOS
    # ========================================
    
    capitulo_ids = fields.Many2many(
        'capitulo.contrato', 
        string='Cap√≠tulos Aplicados',
        help="Cap√≠tulos t√©cnicos aplicados a este pedido de venta. "
             "Cada cap√≠tulo define una estructura de secciones y productos"
    )
    
    # ========================================
    # CAMPOS COMPUTADOS PARA LA INTERFAZ
    # ========================================
    
    capitulos_agrupados = fields.Text(
        string='Cap√≠tulos Agrupados',
        compute='_compute_capitulos_agrupados',
        help="Datos en formato JSON con las l√≠neas agrupadas por cap√≠tulo y secci√≥n "
             "para el widget acorde√≥n. Se recalcula autom√°ticamente cuando cambian las l√≠neas"
    )
    
    tiene_multiples_capitulos = fields.Boolean(
        string='Mostrar Acorde√≥n de Cap√≠tulos',
        compute='_compute_tiene_multiples_capitulos',
        help="Indica si el pedido tiene uno o m√°s cap√≠tulos aplicados para mostrar "
             "el widget acorde√≥n en la interfaz"
    )

    # ========================================
    # M√âTODOS AUXILIARES
    # ========================================

    def _get_base_name(self, decorated_name):
        """
        Extrae el nombre base de un cap√≠tulo o secci√≥n eliminando decoraciones.
        
        Este m√©todo normaliza los nombres de cap√≠tulos y secciones eliminando
        sufijos decorativos, contadores y caracteres especiales para permitir
        comparaciones consistentes entre nombres.
        
        Args:
            decorated_name (str): Nombre decorado que puede contener sufijos como
                                "(SECCI√ìN FIJA)", contadores "(2)", o caracteres especiales
        
        Returns:
            str: Nombre base limpio sin decoraciones
            
        Ejemplos:
            "Materiales El√©ctricos (SECCI√ìN FIJA)" -> "Materiales El√©ctricos"
            "Cap√≠tulo Principal (2)" -> "Cap√≠tulo Principal"
            "‚ïê‚ïê‚ïê Secci√≥n Especial ‚ïê‚ïê‚ïê" -> "Secci√≥n Especial"
        """
        import re
        name = str(decorated_name)
        
        # 1. Eliminar sufijos como (SECCI√ìN FIJA) o contadores num√©ricos
        name = re.sub(r'\s*\((SECCI√ìN FIJA|\d+)\)$', '', name).strip()
        
        # 2. Eliminar caracteres decorativos de los extremos
        decorative_chars = ' \t\n\r=‚ïêüîíüìã'
        name = name.strip(decorative_chars)
        
        return name
    
    # ========================================
    # M√âTODOS COMPUTADOS
    # ========================================
    
    @api.depends('order_line', 'order_line.es_encabezado_capitulo', 'order_line.es_encabezado_seccion', 
                 'order_line.name', 'order_line.product_id', 'order_line.product_uom_qty', 
                 'order_line.product_uom', 'order_line.price_unit', 'order_line.price_subtotal', 'order_line.sequence')
    def _compute_capitulos_agrupados(self):
        """
        Agrupa las l√≠neas del pedido por cap√≠tulos y secciones para el widget acorde√≥n.
        
        Este m√©todo es el n√∫cleo del sistema de cap√≠tulos. Procesa todas las l√≠neas del pedido
        y las organiza en una estructura jer√°rquica de cap√≠tulos > secciones > productos,
        generando un JSON que alimenta el widget acorde√≥n en la interfaz.
        
        Proceso de agrupaci√≥n:
        1. Recorre las l√≠neas ordenadas por secuencia
        2. Identifica encabezados de cap√≠tulos y crea nuevas agrupaciones
        3. Identifica encabezados de secciones dentro de cada cap√≠tulo
        4. Agrupa productos bajo la secci√≥n correspondiente
        5. Calcula totales por cap√≠tulo
        6. Busca categor√≠as de productos para filtrado autom√°tico
        
        Decorador @api.depends:
        - Se recalcula cuando cambian las l√≠neas del pedido
        - Monitorea cambios en campos espec√≠ficos de las l√≠neas
        - Asegura sincronizaci√≥n autom√°tica con la interfaz
        
        Estructura del JSON generado:
        {
            "Nombre Cap√≠tulo": {
                "sections": {
                    "Nombre Secci√≥n": {
                        "lines": [lista de productos],
                        "condiciones_particulares": "texto",
                        "category_id": id_categoria,
                        "category_name": "nombre_categoria"
                    }
                },
                "total": importe_total_capitulo
            }
        }
        
        Manejo de duplicados:
        - Permite m√∫ltiples cap√≠tulos con el mismo nombre
        - A√±ade contadores autom√°ticos: "Cap√≠tulo (2)", "Cap√≠tulo (3)"
        - Mantiene unicidad en las claves del JSON
        """
        import json
        import logging
        _logger = logging.getLogger(__name__)
        
        for order in self:
            _logger.info(f"DEBUG COMPUTE: Procesando pedido {order.id} con {len(order.order_line)} l√≠neas")
            
            # Inicializar estructuras de datos
            capitulos_dict = {}  # Diccionario principal de cap√≠tulos
            current_capitulo_key = None  # Cap√≠tulo actualmente proces√°ndose
            current_seccion_name = None  # Secci√≥n actualmente proces√°ndose
            capitulo_counter = {}  # Contador para cap√≠tulos duplicados
            
            # Procesar cada l√≠nea en orden de secuencia
            for line in order.order_line.sorted('sequence'):
                if line.es_encabezado_capitulo:
                    # ===== PROCESAMIENTO DE ENCABEZADO DE CAP√çTULO =====
                    # Crear clave √∫nica para permitir cap√≠tulos duplicados
                    base_name = line.name
                    if base_name not in capitulo_counter:
                        capitulo_counter[base_name] = 0
                    capitulo_counter[base_name] += 1
                    
                    # Generar clave √∫nica: nombre base + contador si hay duplicados
                    if capitulo_counter[base_name] == 1:
                        current_capitulo_key = base_name
                    else:
                        current_capitulo_key = f"{base_name} ({capitulo_counter[base_name]})"
                    
                    # Inicializar estructura del cap√≠tulo
                    capitulos_dict[current_capitulo_key] = {
                        'sections': {},  # Diccionario de secciones
                        'total': 0.0     # Total acumulado del cap√≠tulo
                    }
                    current_seccion_name = None  # Reset secci√≥n actual
                    
                elif line.es_encabezado_seccion and current_capitulo_key:
                    # ===== PROCESAMIENTO DE ENCABEZADO DE SECCI√ìN =====
                    current_seccion_name = line.name
                    
                    # Buscar configuraci√≥n de categor√≠a para esta secci√≥n
                    category_id = None
                    category_name = None
                    
                    # Buscar en los cap√≠tulos aplicados la secci√≥n correspondiente
                    for capitulo in order.capitulo_ids:
                        for seccion in capitulo.seccion_ids:
                            # Comparar nombres normalizados (sin decoraciones)
                            seccion_base_name = self._get_base_name(seccion.name)
                            line_base_name = self._get_base_name(current_seccion_name)
                            
                            if seccion_base_name.upper() == line_base_name.upper():
                                if seccion.product_category_id:
                                    category_id = seccion.product_category_id.id
                                    category_name = seccion.product_category_id.name
                                break
                        if category_id:
                            break
                    
                    # Inicializar estructura de la secci√≥n
                    capitulos_dict[current_capitulo_key]['sections'][current_seccion_name] = {
                        'lines': [],  # Lista de productos en la secci√≥n
                        'condiciones_particulares': line.condiciones_particulares or '',
                        'category_id': category_id,      # Para filtrado autom√°tico
                        'category_name': category_name   # Para mostrar en interfaz
                    }
                    
                elif current_capitulo_key and current_seccion_name:
                    # ===== PROCESAMIENTO DE L√çNEA DE PRODUCTO =====
                    # Crear estructura de datos para el producto
                    line_data = {
                        'id': line.id,  # ID para edici√≥n directa
                        'sequence': line.sequence,
                        'product_name': line.product_id.name if line.product_id else '',
                        'name': line.name,  # Nombre mostrado en la l√≠nea
                        'product_uom_qty': line.product_uom_qty,
                        'product_uom': line.product_uom.name if line.product_uom else '',
                        'price_unit': line.price_unit,
                        'price_subtotal': line.price_subtotal
                    }
                    
                    # A√±adir producto a la secci√≥n actual
                    capitulos_dict[current_capitulo_key]['sections'][current_seccion_name]['lines'].append(line_data)
                    
                    # Acumular total del cap√≠tulo
                    capitulos_dict[current_capitulo_key]['total'] += line.price_subtotal
            
            # Generar JSON final
            result_json = json.dumps(capitulos_dict) if capitulos_dict else '{}'
            order.capitulos_agrupados = result_json
            
            # Logging detallado para debugging
            _logger.info(f"DEBUG COMPUTE: Pedido {order.id} - Resultado final:")
            _logger.info(f"DEBUG COMPUTE: - Cap√≠tulos encontrados: {len(capitulos_dict)}")
            _logger.info(f"DEBUG COMPUTE: - JSON generado: {len(result_json)} caracteres")
            
            if capitulos_dict:
                for cap_name, cap_data in capitulos_dict.items():
                    sections_count = len(cap_data.get('sections', {}))
                    total_lines = sum(len(sec.get('lines', [])) for sec in cap_data.get('sections', {}).values())
                    _logger.info(f"DEBUG COMPUTE: - Cap√≠tulo '{cap_name}': {sections_count} secciones, {total_lines} productos")
            else:
                _logger.info(f"DEBUG COMPUTE: - ‚ùå No se generaron cap√≠tulos")
    
    @api.depends('order_line', 'order_line.es_encabezado_capitulo')
    def _compute_tiene_multiples_capitulos(self):
        """
        Determina si el pedido tiene cap√≠tulos para mostrar el widget acorde√≥n.
        
        Este m√©todo calcula si el pedido contiene uno o m√°s cap√≠tulos aplicados,
        lo que determina si se debe mostrar el widget acorde√≥n en la interfaz.
        
        L√≥gica:
        - Cuenta las l√≠neas marcadas como encabezado de cap√≠tulo
        - Si hay 1 o m√°s cap√≠tulos: muestra el acorde√≥n
        - Si no hay cap√≠tulos: oculta el acorde√≥n
        
        El campo se recalcula autom√°ticamente cuando:
        - Se a√±aden o eliminan l√≠neas del pedido
        - Cambia el estado es_encabezado_capitulo de alguna l√≠nea
        """
        for order in self:
            # Contar l√≠neas que son encabezados de cap√≠tulo
            capitulos_count = len(order.order_line.filtered('es_encabezado_capitulo'))
            
            # Mostrar acorde√≥n si hay al menos 1 cap√≠tulo
            order.tiene_multiples_capitulos = capitulos_count >= 1
    
    # ========================================
    # M√âTODOS DE ACCI√ìN (INTERFAZ)
    # ========================================
    
    def action_add_capitulo(self):
        """
        Abre el wizard para gestionar cap√≠tulos del presupuesto.
        
        Este m√©todo se ejecuta cuando el usuario hace clic en el bot√≥n "Gestionar Cap√≠tulos"
        en la vista del pedido de venta. Abre una ventana modal con el wizard que permite
        seleccionar y aplicar cap√≠tulos al pedido.
        
        Returns:
            dict: Acci√≥n de ventana para abrir el wizard en modo modal
            
        Contexto pasado al wizard:
        - default_order_id: ID del pedido actual
        - active_id: ID del registro activo
        - active_model: Modelo del registro activo
        """
        self.ensure_one()
        
        return {
            'type': 'ir.actions.act_window',
            'name': 'Gestionar Cap√≠tulos del Presupuesto',
            'res_model': 'capitulo.wizard',
            'view_mode': 'form',
            'target': 'new',  # Ventana modal
            'context': {
                'default_order_id': self.id,
                'active_id': self.id,
                'active_model': 'sale.order'
            }
        }
    
    def toggle_capitulo_collapse(self, capitulo_index):
        """
        Alterna el estado colapsado/expandido de un cap√≠tulo en el acorde√≥n.
        
        Este m√©todo maneja la interacci√≥n del usuario con el widget acorde√≥n,
        permitiendo expandir o colapsar cap√≠tulos individuales para mejorar
        la navegaci√≥n en presupuestos con m√∫ltiples cap√≠tulos.
        
        Args:
            capitulo_index (int): √çndice del cap√≠tulo en la lista (base 0)
            
        Returns:
            dict: Acci√≥n para recargar la vista y reflejar el cambio
            
        Nota: Este m√©todo modifica el JSON de capitulos_agrupados para
        persistir el estado de expansi√≥n entre recargas de p√°gina.
        """
        import json
        
        self.ensure_one()
        capitulos = json.loads(self.capitulos_agrupados or '[]')
        
        # Validar √≠ndice y alternar estado
        if 0 <= capitulo_index < len(capitulos):
            capitulos[capitulo_index]['collapsed'] = not capitulos[capitulo_index].get('collapsed', True)
            self.capitulos_agrupados = json.dumps(capitulos)
        
        return {'type': 'ir.actions.client', 'tag': 'reload'}
    
    @api.model
    def add_product_to_section(self, order_id, capitulo_name, seccion_name, product_id, quantity=1.0):
        """A√±ade un producto a una secci√≥n espec√≠fica de un cap√≠tulo"""
        import logging
        _logger = logging.getLogger(__name__)
        
        _logger.info(f"DEBUG ADD_PRODUCT: Iniciando adici√≥n de producto {product_id} a cap√≠tulo '{capitulo_name}', secci√≥n '{seccion_name}'")
        
        order = self.browse(order_id)
        order.ensure_one()
        
        _logger.info(f"DEBUG ADD_PRODUCT: Pedido {order.id} tiene {len(order.order_line)} l√≠neas antes de a√±adir")
        
        try:
            if not product_id:
                _logger.error(f"DEBUG ADD_PRODUCT: ‚ùå No se proporcion√≥ product_id")
                raise UserError("Debe seleccionar un producto")
            
            product = self.env['product.product'].browse(product_id)
            if not product.exists():
                _logger.error(f"DEBUG ADD_PRODUCT: ‚ùå Producto {product_id} no existe")
                raise UserError("El producto seleccionado no existe")
                
            _logger.info(f"DEBUG ADD_PRODUCT: ‚úÖ Producto encontrado: {product.name} (ID: {product.id})")
        except Exception as e:
            _logger.error(f"DEBUG ADD_PRODUCT: ‚ùå Error al validar producto: {str(e)}")
            raise e
        
        _logger.info(f"DEBUG ADD_PRODUCT: Producto encontrado: {product.name}")
        
        # Buscar la l√≠nea de encabezado del cap√≠tulo
        capitulo_line = None
        seccion_line = None
        
        _logger.info(f"DEBUG ADD_PRODUCT: Buscando cap√≠tulo '{capitulo_name}' y secci√≥n '{seccion_name}'")
        _logger.info(f"DEBUG ADD_PRODUCT: L√≠neas en el pedido:")
        for line in order.order_line.sorted('sequence'):
            _logger.info(f"DEBUG ADD_PRODUCT: - L√≠nea {line.sequence}: '{line.name}' (Cap√≠tulo: {line.es_encabezado_capitulo}, Secci√≥n: {line.es_encabezado_seccion})")
        
        for line in order.order_line.sorted('sequence'):
            if line.es_encabezado_capitulo:
                line_base_name = self._get_base_name(line.name)
                capitulo_base_name = self._get_base_name(capitulo_name)
                
                _logger.info(f"DEBUG ADD_PRODUCT: Comparando cap√≠tulo base '{line_base_name}' con '{capitulo_base_name}'")
                
                if line_base_name.upper() == capitulo_base_name.upper():
                    capitulo_line = line
                    _logger.info(f"DEBUG ADD_PRODUCT: ‚úÖ Cap√≠tulo encontrado: {line.name}")
                    break
        
        if capitulo_line:
            _logger.info(f"DEBUG ADD_PRODUCT: Buscando secci√≥n '{seccion_name}' despu√©s del cap√≠tulo '{capitulo_line.name}'")
            _logger.info(f"DEBUG ADD_PRODUCT: Cap√≠tulo encontrado en secuencia: {capitulo_line.sequence}")
            
            # Obtener todas las l√≠neas despu√©s del cap√≠tulo
            # Si todas las l√≠neas tienen la misma secuencia, usar el ID para ordenar
            all_lines = order.order_line.sorted(lambda l: (l.sequence, l.id))
            capitulo_index = None
            for i, line in enumerate(all_lines):
                if line.id == capitulo_line.id:
                    capitulo_index = i
                    break
            
            if capitulo_index is not None:
                lines_after_chapter = all_lines[capitulo_index + 1:]
            else:
                lines_after_chapter = order.order_line.filtered(lambda l: l.sequence > capitulo_line.sequence).sorted('sequence')
            
            _logger.info(f"DEBUG ADD_PRODUCT: L√≠neas despu√©s del cap√≠tulo: {len(lines_after_chapter)}")
            
            for line in lines_after_chapter:
                _logger.info(f"DEBUG ADD_PRODUCT: Revisando l√≠nea {line.sequence}: '{line.name}' (Cap√≠tulo: {line.es_encabezado_capitulo}, Secci√≥n: {line.es_encabezado_seccion})")
                
                if line.es_encabezado_capitulo:
                    # Si encontramos otro cap√≠tulo, paramos la b√∫squeda
                    _logger.info(f"DEBUG ADD_PRODUCT: Encontrado otro cap√≠tulo, parando b√∫squeda")
                    break
                elif line.es_encabezado_seccion:
                    line_base_name = self._get_base_name(line.name)
                    seccion_base_name = self._get_base_name(seccion_name)
                    
                    _logger.info(f"DEBUG ADD_PRODUCT: Comparando secci√≥n base '{line_base_name}' con '{seccion_base_name}'")
                    
                    if line_base_name.upper() == seccion_base_name.upper():
                        seccion_line = line
                        _logger.info(f"DEBUG ADD_PRODUCT: ‚úÖ Secci√≥n encontrada: {line.name}")
                        break
                else:
                    _logger.info(f"DEBUG ADD_PRODUCT: L√≠nea de producto: '{line.name}' (secuencia: {line.sequence})")
        else:
            _logger.error(f"DEBUG ADD_PRODUCT: ‚ùå No se encontr√≥ el cap√≠tulo '{capitulo_name}'")
        
        if not capitulo_line:
            raise UserError(f"No se encontr√≥ el cap√≠tulo: {capitulo_name}")
        
        if not seccion_line:
            raise UserError(f"No se encontr√≥ la secci√≥n: {seccion_name} en el cap√≠tulo: {capitulo_name}")
        
        # VALIDACI√ìN: Verificar si es una secci√≥n de solo texto (condiciones particulares)
        seccion_name_lower = seccion_name.lower().strip()
        if 'condiciones particulares' in seccion_name_lower:
            _logger.warning(f"DEBUG ADD_PRODUCT: ‚ùå Intento de a√±adir producto a secci√≥n de solo texto: '{seccion_name}'")
            raise UserError(f"No se pueden a√±adir productos a la secci√≥n '{seccion_name}'. Esta secci√≥n es solo para texto editable.")
        
        # Estrategia simplificada: insertar inmediatamente despu√©s del encabezado de secci√≥n
        # Esto garantiza que el producto aparezca en la secci√≥n correcta
        insert_sequence = seccion_line.sequence + 1
        _logger.info(f"DEBUG: Insertando producto inmediatamente despu√©s de la secci√≥n '{seccion_line.name}' (seq: {seccion_line.sequence})")
        _logger.info(f"DEBUG: Secuencia de inserci√≥n: {insert_sequence}")

        # Desplazar todas las l√≠neas que tengan secuencia >= insert_sequence
        lines_to_shift = order.order_line.filtered(lambda l: l.sequence >= insert_sequence)
        _logger.info(f"DEBUG: {len(lines_to_shift)} l√≠neas para desplazar.")

        # Ordenamos de forma descendente para evitar conflictos de clave √∫nica al actualizar
        for line_to_shift in lines_to_shift.sorted(key=lambda r: r.sequence, reverse=True):
            new_seq = line_to_shift.sequence + 1
            _logger.info(f"DEBUG: Desplazando l√≠nea '{line_to_shift.name}' de {line_to_shift.sequence} a {new_seq}.")
            # Usamos el contexto para saltar la validaci√≥n de escritura en encabezados
            line_to_shift.with_context(from_capitulo_wizard=True).sequence = new_seq
        
        _logger.info(f"DEBUG: Secuencia de inserci√≥n final: {insert_sequence}")
        
        # Crear la nueva l√≠nea de producto
        try:
            new_line_vals = {
                'order_id': order.id,
                'product_id': product.id,
                'name': product.name,
                'product_uom_qty': quantity,
                'product_uom': product.uom_id.id,
                'price_unit': product.list_price,
                'sequence': insert_sequence,
                'es_encabezado_capitulo': False,
                'es_encabezado_seccion': False,
            }
            
            _logger.info(f"DEBUG ADD_PRODUCT: Valores para nueva l√≠nea: {new_line_vals}")
            
            # Crear la l√≠nea con contexto especial para evitar restricciones
            _logger.info(f"DEBUG ADD_PRODUCT: Creando l√≠nea con contexto from_capitulo_wizard=True")
            new_line = self.env['sale.order.line'].with_context(
                from_capitulo_wizard=True
            ).create(new_line_vals)
            
            _logger.info(f"DEBUG ADD_PRODUCT: ‚úÖ L√≠nea creada exitosamente con ID: {new_line.id}")
            
        except Exception as e:
            _logger.error(f"DEBUG ADD_PRODUCT: ‚ùå Error al crear l√≠nea: {str(e)}")
            import traceback
            _logger.error(f"DEBUG ADD_PRODUCT: Traceback completo: {traceback.format_exc()}")
            raise UserError(f"Error al crear la l√≠nea de producto: {str(e)}")
        
        # Forzar la escritura de los datos pendientes sin commit
        self.env.cr.flush()
        
        # Refrescar el record completo desde la base de datos
        order.invalidate_recordset()
        # Forzar el rec√°lculo del campo computed
        order._compute_capitulos_agrupados()
        
        _logger.info(f"DEBUG: Producto a√±adido exitosamente. ID de nueva l√≠nea: {new_line.id}")
        _logger.info(f"DEBUG: Secuencia de nueva l√≠nea: {new_line.sequence}")
        _logger.info(f"DEBUG: Total de l√≠neas en el pedido: {len(order.order_line)}")
        _logger.info(f"DEBUG: Campo capitulos_agrupados recalculado: {len(order.capitulos_agrupados)} caracteres")
        
        # Verificar que la nueva l√≠nea est√° en order_line
        if new_line.id in order.order_line.ids:
            _logger.info(f"DEBUG: ‚úì Nueva l√≠nea confirmada en order_line")
        else:
            _logger.error(f"DEBUG: ‚úó Nueva l√≠nea NO encontrada en order_line")
        
        return {
            'success': True,
            'message': f'Producto {product.name} a√±adido a {seccion_name}',
            'line_id': new_line.id
        }
    
    @api.model
    def save_condiciones_particulares(self, order_id, capitulo_name, seccion_name, condiciones_text):
        """Guarda las condiciones particulares de una secci√≥n espec√≠fica"""
        import logging
        _logger = logging.getLogger(__name__)
        
        _logger.info(f"DEBUG SAVE_CONDICIONES: Guardando condiciones para cap√≠tulo '{capitulo_name}', secci√≥n '{seccion_name}'")
        _logger.info(f"DEBUG SAVE_CONDICIONES: Texto: {condiciones_text[:100]}...")
        
        order = self.browse(order_id)
        order.ensure_one()
        
        # Buscar la l√≠nea de la secci√≥n espec√≠fica
        seccion_line = None
        for line in order.order_line.sorted('sequence'):
            if line.es_encabezado_seccion:
                line_base_name = self._get_base_name(line.name)
                seccion_base_name = self._get_base_name(seccion_name)
                
                if line_base_name.upper() == seccion_base_name.upper():
                    seccion_line = line
                    break
        
        if not seccion_line:
            _logger.error(f"DEBUG SAVE_CONDICIONES: ‚ùå No se encontr√≥ la secci√≥n '{seccion_name}'")
            raise UserError(f"No se encontr√≥ la secci√≥n: {seccion_name}")
        
        try:
            # Guardar las condiciones particulares en la l√≠nea de secci√≥n
            seccion_line.with_context(from_capitulo_wizard=True).condiciones_particulares = condiciones_text
            _logger.info(f"DEBUG SAVE_CONDICIONES: ‚úÖ Condiciones guardadas en l√≠nea {seccion_line.id}")
            
            return {
                'success': True,
                'message': f'Condiciones particulares guardadas para {seccion_name}'
            }
            
        except Exception as e:
            _logger.error(f"DEBUG SAVE_CONDICIONES: ‚ùå Error al guardar: {str(e)}")
            raise UserError(f"Error al guardar las condiciones particulares: {str(e)}")

class SaleOrderLine(models.Model):
    _inherit = 'sale.order.line'
    
    es_encabezado_capitulo = fields.Boolean(
        string='Es Encabezado de Cap√≠tulo',
        default=False,
        help="Indica si esta l√≠nea es un encabezado de cap√≠tulo (no modificable)"
    )
    
    es_encabezado_seccion = fields.Boolean(
        string='Es Encabezado de Secci√≥n',
        default=False,
        help="Indica si esta l√≠nea es un encabezado de secci√≥n (no modificable)"
    )
    
    condiciones_particulares = fields.Text(
        string='Condiciones Particulares',
        help="Texto libre para condiciones particulares de esta secci√≥n"
    )
    
    def unlink(self):
        """Previene la eliminaci√≥n de encabezados de cap√≠tulos y secciones"""
        import logging
        _logger = logging.getLogger(__name__)
        
        _logger.info(f"DEBUG UNLINK: Intentando eliminar {len(self)} l√≠neas")
        _logger.info(f"DEBUG UNLINK: Contexto completo: {dict(self.env.context)}")
        _logger.info(f"DEBUG UNLINK: from_capitulo_widget: {self.env.context.get('from_capitulo_widget')}")
        
        for line in self:
            _logger.info(f"DEBUG UNLINK: L√≠nea {line.id} - '{line.name}' - Cap√≠tulo: {line.es_encabezado_capitulo}, Secci√≥n: {line.es_encabezado_seccion}")
        
        # Verificar si alguna l√≠nea es un encabezado
        headers_to_delete = self.filtered(lambda l: l.es_encabezado_capitulo or l.es_encabezado_seccion)
        
        if headers_to_delete:
            header_names = ', '.join(headers_to_delete.mapped('name'))
            _logger.error(f"DEBUG UNLINK: Intentando eliminar encabezados: {header_names}")
            raise UserError(
                f"No se pueden eliminar los siguientes encabezados: {header_names}\n"
                "Los encabezados de cap√≠tulos y secciones son elementos estructurales del presupuesto."
            )
        
        # Si llegamos aqu√≠, todas las l√≠neas son productos normales
        _logger.info("DEBUG UNLINK: Todas las l√≠neas son productos normales, procediendo con eliminaci√≥n")
        
        try:
            result = super().unlink()
            _logger.info("DEBUG UNLINK: Eliminaci√≥n exitosa")
            return result
        except Exception as e:
            _logger.error(f"DEBUG UNLINK: Error durante eliminaci√≥n: {str(e)}")
            raise e
    
    def write(self, vals):
        """Previene la modificaci√≥n de campos cr√≠ticos en encabezados"""
        # Si se est√° modificando desde el wizard de cap√≠tulos, permitir la modificaci√≥n
        if self.env.context.get('from_capitulo_wizard'):
            return super().write(vals)
            
        protected_fields = ['name', 'product_id', 'product_uom_qty', 'price_unit', 'sequence', 'display_type']
        
        for line in self:
            if (line.es_encabezado_capitulo or line.es_encabezado_seccion):
                # Verificar si se est√° intentando modificar campos protegidos
                for field in protected_fields:
                    if field in vals:
                        tipo = "cap√≠tulo" if line.es_encabezado_capitulo else "secci√≥n"
                        raise UserError(
                            f"No se puede modificar el encabezado de {tipo}: {line.name}\n"
                            f"Los encabezados son elementos estructurales del presupuesto y no se pueden editar."
                        )
        
        return super().write(vals)
    
    @api.model
    def create(self, vals):
        """Controla la creaci√≥n de nuevas l√≠neas cuando hay cap√≠tulos estructurados"""
        import logging
        _logger = logging.getLogger(__name__)
        
        _logger.info(f"DEBUG CREATE: Creando l√≠nea con valores: {vals}")
        _logger.info(f"DEBUG CREATE: Contexto: {dict(self.env.context)}")
        _logger.info(f"DEBUG CREATE: from_capitulo_wizard: {self.env.context.get('from_capitulo_wizard')}")
        
        # Si se est√° creando desde el wizard de cap√≠tulos, permitir la creaci√≥n
        if self.env.context.get('from_capitulo_wizard'):
            _logger.info(f"DEBUG CREATE: ‚úÖ Creaci√≥n permitida por contexto from_capitulo_wizard")
            try:
                result = super().create(vals)
                _logger.info(f"DEBUG CREATE: ‚úÖ L√≠nea creada exitosamente con ID: {result.id}")
                return result
            except Exception as e:
                _logger.error(f"DEBUG CREATE: ‚ùå Error en super().create(): {str(e)}")
                import traceback
                _logger.error(f"DEBUG CREATE: Traceback: {traceback.format_exc()}")
                raise e
        
        # Bloquear la creaci√≥n manual de encabezados de cap√≠tulos y secciones
        if vals.get('es_encabezado_capitulo') or vals.get('es_encabezado_seccion'):
            _logger.error(f"DEBUG CREATE: ‚ùå Intento de crear encabezado manualmente")
            raise UserError(
                "No se pueden crear encabezados de cap√≠tulos o secciones manualmente.\n"
                "Use el bot√≥n 'Gestionar Cap√≠tulos' para a√±adir cap√≠tulos estructurados."
            )
        
        # Bloquear la creaci√≥n de l√≠neas de tipo 'line_section' que no sean productos normales
        if vals.get('display_type') in ['line_section', 'line_note'] and not vals.get('product_id'):
            order_id = vals.get('order_id')
            if order_id:
                order = self.env['sale.order'].browse(order_id)
                existing_headers = order.order_line.filtered(
                    lambda l: l.es_encabezado_capitulo or l.es_encabezado_seccion
                )
                if existing_headers:
                    _logger.error(f"DEBUG CREATE: ‚ùå Intento de crear secci√≥n/nota con cap√≠tulos estructurados")
                    raise UserError(
                        "No se pueden a√±adir secciones o notas manualmente cuando el presupuesto tiene cap√≠tulos estructurados.\n"
                        "Use el bot√≥n 'Gestionar Cap√≠tulos' para gestionar la estructura."
                    )
        
        _logger.info(f"DEBUG CREATE: ‚úÖ Validaciones pasadas, creando l√≠nea normal")
        try:
            result = super().create(vals)
            _logger.info(f"DEBUG CREATE: ‚úÖ L√≠nea normal creada exitosamente con ID: {result.id}")
            return result
        except Exception as e:
            _logger.error(f"DEBUG CREATE: ‚ùå Error en super().create() para l√≠nea normal: {str(e)}")
            import traceback
            _logger.error(f"DEBUG CREATE: Traceback: {traceback.format_exc()}")
            raise e