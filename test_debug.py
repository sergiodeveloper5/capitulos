#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de prueba para diagnosticar problemas con el widget de cap√≠tulos

Este script debe ejecutarse desde la consola de Odoo o como un script independiente
que se conecte a la base de datos de Odoo.
"""

import json
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO)
_logger = logging.getLogger(__name__)

def test_capitulos_widget():
    """
    Funci√≥n de prueba para verificar el funcionamiento del widget de cap√≠tulos
    """
    print("=== INICIANDO PRUEBAS DEL WIDGET DE CAP√çTULOS ===")
    
    # Esta funci√≥n debe ser llamada desde el contexto de Odoo
    # con acceso a self.env
    
    try:
        # Buscar un pedido de venta existente
        orders = self.env['sale.order'].search([('state', '=', 'draft')], limit=1)
        
        if not orders:
            print("‚ùå No se encontraron pedidos en borrador")
            return False
            
        order = orders[0]
        print(f"‚úÖ Usando pedido: {order.name} (ID: {order.id})")
        
        # Verificar l√≠neas existentes
        print(f"üìã L√≠neas existentes: {len(order.order_line)}")
        for line in order.order_line:
            print(f"  - {line.sequence}: {line.name} (Cap: {line.es_encabezado_capitulo}, Sec: {line.es_encabezado_seccion})")
        
        # Verificar campo computed
        print(f"üîÑ Campo capitulos_agrupados: {len(order.capitulos_agrupados)} caracteres")
        print(f"üîÑ Tiene m√∫ltiples cap√≠tulos: {order.tiene_multiples_capitulos}")
        
        # Intentar parsear el JSON
        try:
            data = json.loads(order.capitulos_agrupados or '{}')
            print(f"‚úÖ JSON v√°lido con {len(data)} cap√≠tulos")
            
            for cap_name, cap_data in data.items():
                sections = cap_data.get('sections', {})
                print(f"  üìÅ Cap√≠tulo '{cap_name}': {len(sections)} secciones")
                
                for sec_name, sec_data in sections.items():
                    lines = sec_data.get('lines', [])
                    print(f"    üìÇ Secci√≥n '{sec_name}': {len(lines)} productos")
                    
        except json.JSONDecodeError as e:
            print(f"‚ùå Error al parsear JSON: {e}")
            print(f"‚ùå Contenido: {order.capitulos_agrupados[:200]}...")
        
        # Forzar rec√°lculo
        print("üîÑ Forzando rec√°lculo...")
        order._compute_capitulos_agrupados()
        order._compute_tiene_multiples_capitulos()
        
        print(f"üîÑ Despu√©s del rec√°lculo: {len(order.capitulos_agrupados)} caracteres")
        print(f"üîÑ Tiene m√∫ltiples cap√≠tulos: {order.tiene_multiples_capitulos}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error durante las pruebas: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_add_product():
    """
    Prueba la adici√≥n de un producto a una secci√≥n
    """
    print("\n=== PROBANDO ADICI√ìN DE PRODUCTO ===")
    
    try:
        # Buscar un pedido con cap√≠tulos
        orders = self.env['sale.order'].search([
            ('state', '=', 'draft'),
            ('tiene_multiples_capitulos', '=', True)
        ], limit=1)
        
        if not orders:
            print("‚ùå No se encontraron pedidos con cap√≠tulos")
            return False
            
        order = orders[0]
        print(f"‚úÖ Usando pedido: {order.name} (ID: {order.id})")
        
        # Buscar un producto
        products = self.env['product.product'].search([('sale_ok', '=', True)], limit=1)
        if not products:
            print("‚ùå No se encontraron productos")
            return False
            
        product = products[0]
        print(f"‚úÖ Usando producto: {product.name} (ID: {product.id})")
        
        # Buscar cap√≠tulos y secciones existentes
        capitulos_data = json.loads(order.capitulos_agrupados or '{}')
        
        if not capitulos_data:
            print("‚ùå No hay cap√≠tulos en el pedido")
            return False
            
        # Tomar el primer cap√≠tulo y primera secci√≥n
        cap_name = list(capitulos_data.keys())[0]
        cap_data = capitulos_data[cap_name]
        
        if not cap_data.get('sections'):
            print(f"‚ùå El cap√≠tulo '{cap_name}' no tiene secciones")
            return False
            
        sec_name = list(cap_data['sections'].keys())[0]
        
        print(f"üéØ A√±adiendo producto a cap√≠tulo '{cap_name}', secci√≥n '{sec_name}'")
        
        # Contar l√≠neas antes
        lines_before = len(order.order_line)
        
        # A√±adir producto
        result = order.add_product_to_section(
            order.id, cap_name, sec_name, product.id, 1.0
        )
        
        print(f"üì§ Resultado: {result}")
        
        # Verificar despu√©s
        order.invalidate_recordset()
        lines_after = len(order.order_line)
        
        print(f"üìä L√≠neas antes: {lines_before}, despu√©s: {lines_after}")
        
        if lines_after > lines_before:
            print("‚úÖ Producto a√±adido correctamente")
            
            # Verificar que el campo computed se actualiz√≥
            order._compute_capitulos_agrupados()
            new_data = json.loads(order.capitulos_agrupados or '{}')
            
            if cap_name in new_data and sec_name in new_data[cap_name].get('sections', {}):
                new_lines = new_data[cap_name]['sections'][sec_name].get('lines', [])
                print(f"‚úÖ Secci√≥n ahora tiene {len(new_lines)} productos")
            else:
                print("‚ùå La secci√≥n no se encontr√≥ en los datos actualizados")
                
        else:
            print("‚ùå No se a√±adi√≥ ninguna l√≠nea")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Error durante la prueba de adici√≥n: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == '__main__':
    print("Este script debe ejecutarse desde el contexto de Odoo")
    print("Ejemplo de uso en la consola de Odoo:")
    print("")
    print("# Importar el script")
    print("exec(open('/path/to/test_debug.py').read())")
    print("")
    print("# Ejecutar las pruebas")
    print("test_capitulos_widget()")
    print("test_add_product()")